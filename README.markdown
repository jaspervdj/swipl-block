swipl-block
===========

This project is an implementation of the [block] declaration for [SWI-Prolog].

[block]: http://www.sics.se/sicstus/docs/3.12.9/html/sicstus/Block-Declarations.html
[SWI-Prolog]: http://www.swi-prolog.org/

Module structure
----------------

- `block.pl`: Code to parse and assert block declarations
- `compiler.pl`: A compiler for code with block declarations. This module
  exports a simple `compile/2` predicate which can be selectively enabled in
  other modules by using `term_expansion/2`.
- `examples.pl`: A few examples which make use of block declarations
- `interpreter.pl`: An iterpreter which can evaluate code with block
  declarations. Exports the simple `eval/1` predicate.
- `tests_compiler.pl`: Tests for the interpreter.
- `tests_interpreter.pl`: Tests for the compiler.
- `tests_util.pl`: Utilities for testing (assertions).

Compiler: known issues
----------------------

We chose to minimize choice points in the code generated by the compiler. This
leads to a few issues, however. Some of them can be easily fixed, others will be
harder.

- Block specifications for multiple functions must not appear in the same block
  statement. Something like this will work incorrectly:

        :- block foo(?,-), bar(-,?).

- Block statements for a single function must not appear in multiple statements.
  Something like this will not work correctly either:

        :- block foo(?,-).
        :- block foo(-,?).

- We generate new predicate. For example, we generate `compiler_block_foo/2` for a
  blocking predicate `foo/2`. While unlikely, there is no guarantee this
  predicate does not already exist.
